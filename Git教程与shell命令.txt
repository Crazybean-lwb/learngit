1.自报家门：绑定的登入账号和邮箱
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


2.创建版本库
$ mkdir learngit
$ cd learngit
$ pwd
C:\Users\BigData\learngit
通过git init命令把这个目录变成Git可以管理的仓库
$ git init
Initialized empty Git repository in /Users/BigData/learngit/.git/


3.编写一个readme.txt文件
用命令git add告诉Git，把文件添加到仓库
$ git add readme.txt
用命令git commit告诉Git，把文件提交到仓库
$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 git status命令可以让我们时刻掌握仓库当前的状态
 $ git status
 git diff这个命令，能看看具体修改了什么内容
 $ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
 
 
4.在Git中，我们用git log命令查看历史记录
 $ git log
commit f56362c3ad9926a0ecd132eafdd645ab2d212005
Author: crazybean <lwbxidian@163.com>
Date:   Tue Sep 6 20:31:16 2016 +0800

    append GPL

commit 5a2d263cc82ee7fe0e6a6629d90b75f0ef1c2586
Author: crazybean <lwbxidian@163.com>
Date:   Tue Sep 6 20:28:21 2016 +0800

    add distributed

commit 488266364cfb481c830c6ef8ee5e1600f668d5e2
Author: crazybean <lwbxidian@163.com>
Date:   Tue Sep 6 15:05:02 2016 +0800

    wrote a readme file
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log --pretty=oneline
f56362c3ad9926a0ecd132eafdd645ab2d212005 append GPL
5a2d263cc82ee7fe0e6a6629d90b75f0ef1c2586 add distributed
488266364cfb481c830c6ef8ee5e1600f668d5e2 wrote a readme file


5.把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令
$ git reset --hard HEAD^
HEAD is now at 5a2d263 add distributed
回退到指定版本
$ git reset --hard f56362c3
HEAD is now at f56362c append GPL
Git提供了一个命令git reflog用来记录你的每一次命令
f56362c HEAD@{0}: reset: moving to f56362c3ad9926a0ecd132eafdd645ab2d212005
5a2d263 HEAD@{1}: reset: moving to HEAD^
f56362c HEAD@{2}: commit: append GPL
5a2d263 HEAD@{3}: commit: add distributed
4882663 HEAD@{4}: commit (initial): wrote a readme file


6.删除文件
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。


7.远程仓库
GitHub允许你添加多个Key。
假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交。
只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
从远程库克隆:
用命令git clone克隆一个本地库
$ git clone git@github.com:liuweibin6566396837/gitskills.git
Cloning into 'gitskills'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


8.创建与合并分支
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
Switched to a new branch 'dev'
然后，用git branch命令查看当前分支：
$ git branch
* dev
  master
$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：
 $ git checkout master
Switched to branch 'master'
现在，我们把dev分支的工作成果合并到master分支上：
$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
Deleted branch dev (was fec145a).
删除后，查看branch，就只剩下master分支了：
$ git branch
* master
解决冲突
准备新的feature1分支，继续我们的新分支开发：
$ git checkout -b feature1
Switched to a new branch 'feature1'
修改readme.txt最后一行，改为：
Creating a new branch is quick AND simple.
$ git add readme.txt 
$ git commit -m "AND simple"
[feature1 75a857c] AND simple
1 file changed, 1 insertion(+), 1 deletion(-)
切换到master分支：
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
在master分支上把readme.txt文件的最后一行改为：
Creating a new branch is quick & simple.
$ git add readme.txt 
$ git commit -m "& simple"
[master 400b400] & simple
1 file changed, 1 insertion(+), 1 deletion(-)
这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：
Creating a new branch is quick and simple.
再提交：
$ git add readme.txt 
$ git commit -m "conflict fixed"
[master 59bc1cb] conflict fixed
用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit
*   908dddd conflict fixed
|\
| * 8394669 AND simple
* | 609c197 & simple
|/
* b592f71 branch test
最后，删除feature1分支：
$ git branch -d feature1
Deleted branch feature1 (was 8394669).












